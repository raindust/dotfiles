{
    "git.enabled": true,
    "cmake.configureOnOpen": false,
    "vim.searchHighlightColor": "rgba(150, 150, 255, 0.3)",
    "vim.easymotion": true,
    "vim.sneak": true,
    "vim.incsearch": true,
    "vim.useSystemClipboard": true,
    "vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    "vim.leader": ",",
    "vim.debug.loggingLevelForConsole": "debug",
    "vim.insertModeKeyBindings": [
        {
            "before": [
                "j",
                "j"
            ],
            "after": [
                "<Esc>"
            ]
        }
    ],
    "vim.insertModeKeyBindingsNonRecursive": [
        {
            "before": [
                "<C-n>"
            ],
            "commands": [
                {
                    "command": ":nohl"
                }
            ]
        }
    ],
    "vim.normalModeKeyBindingsNonRecursive": [
        {
            "before": [
                "<C-n>"
            ],
            "commands": [
                {
                    "command": ":nohl"
                }
            ]
        },
        {
            "before": [
                "<leader>",
                "k"
            ],
            "commands": [
                "workbench.action.keepEditor"
            ]
        },
        {
            "before": [
                "<leader>",
                "<space>"
            ],
            "when": "editorTextFocus && !editorReadonly",
            "commands": [
                "editor.action.trimTrailingWhitespace"
            ]
        },
        {
            "before": [
                "<leader>",
                "r"
            ],
            "commands": [
                "editor.action.rename"
            ],
            "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
        },
        {
            "before": [
                "<leader>",
                "f"
            ],
            "commands": [
                "editor.action.formatDocument"
            ],
            "when": "editorTextFocus && !editorReadonly"
        },
        {
            "before": [
                "<leader>",
                "o"
            ],
            "commands": [
                "workbench.action.closeAllEditors"
            ]
        },
        {
            "before": [
                "<leader>",
                "h"
            ],
            "commands": [
                "workbench.action.maximizeEditor"
            ]
        },
        {
            "before": [
                "<leader>",
                "i"
            ],
            "commands": [
                "editor.action.goToImplementation"
            ],
            "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
        },
        {
            "before": [
                "<leader>",
                "q"
            ],
            "commands": [
                "workbench.action.togglePanel",
                "workbench.action.toggleSidebarVisibility"
            ]
        },
        {
            "before": [
                "<leader>",
                "n",
                "b"
            ],
            "commands": [
                "workbench.action.navigateBack"
            ]
        },
        {
            "before": [
                "<leader>",
                "n",
                "f"
            ],
            "commands": [
                "workbench.action.navigateForward"
            ]
        },
        {
            "before": [
                "<leader>",
                "j",
                "c"
            ],
            "commands": [
                "code-runner.run"
            ]
        },
        {
            "before": [
                "g",
                "d"
            ],
            "commands": [
                "editor.action.revealDefinition"
            ],
            "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
        },
        {
            "before": [
                "g",
                "i"
            ],
            "commands": [
                "editor.action.goToImplementation"
            ],
            "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
        },
        {
            "before": [
                "g",
                "u"
            ],
            "commands": [
                "references-view.find"
            ],
            "when": "editorHasReferenceProvider"
        },
        {
            "before": [
                "g",
                "r"
            ],
            "commands": [
                "references-view.find"
            ],
            "when": "editorHasReferenceProvider"
        },
        {
            "before": [
                "g",
                "t"
            ],
            "commands": [
                "editor.action.goToTypeDefinition"
            ]
        },
        {
            "before": [
                "g",
                "l"
            ],
            "commands": [
                "workbench.action.navigateForward"
            ]
        },
        {
            "before": [
                "g",
                "h"
            ],
            "commands": [
                "workbench.action.navigateBack"
            ]
        },
        {
            "before": [
                "g",
                "w"
            ],
            "commands": [
                "editor.action.toggleWordWrap"
            ]
        },
        {
            "before": [
                "<leader>",
                "s"
            ],
            "commands": [
                "workbench.files.action.focusFilesExplorer"
            ]
        }
    ],
    "vim.visualModeKeyBindingsNonRecursive": [
        {
            "before": [
                "<leader>",
                "r"
            ],
            "commands": [
                "editor.action.startFindReplaceAction"
            ]
        },
        {
            "before": [
                "<leader>",
                "f"
            ],
            "commands": [
                "actions.find"
            ]
        },
        {
            "before": [
                "<leader>",
                "F"
            ],
            "commands": [
                "workbench.action.findInFiles"
            ]
        },
        {
            "before": [
                "<leader>",
                "q"
            ],
            "commands": [
                "workbench.action.togglePanel",
                "workbench.action.toggleSidebarVisibility"
            ]
        }
    ],
    "workbench.startupEditor": "newUntitledFile",
    "C_Cpp.clang_format_fallbackStyle": "{BasedOnStyle: Google, IndentWidth: 4}",
    "editor.snippetSuggestions": "top", // snippets代码优先显示补全
    "code-runner.runInTerminal": true, // 设置成false会在“输出”中输出，无法输入
    "code-runner.executorMap": {
        "c": "cd $dir && clang $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c11 && $dir$fileNameWithoutExt",
        "cpp": "cd $dir && clang++ $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c++17 && $dir$fileNameWithoutExt"
    }, // 设置code runner的命令行
    "code-runner.saveFileBeforeRun": true, // run code前保存
    "code-runner.preserveFocus": true, // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false
    "code-runner.clearPreviousOutput": false, // 每次run code前清空属于code runner的终端消息
    "C_Cpp.clang_format_sortIncludes": true, // 格式化时调整include的顺序（按字母排序）
    "C_Cpp.intelliSenseEngine": "Default", // 可以为Default或Tag Parser，后者较老，功能较简单。具体差别参考cpptools扩展文档
    "C_Cpp.errorSquiggles": "Disabled", // 因为有clang的lint，所以关掉
    "C_Cpp.autocomplete": "Disabled", // 因为有clang的补全，所以关掉
    "clang.cflags": [ // 控制c语言静态检测的参数
        "--target=x86_64-apple-darwin18.5.0", // 根据自己的语言版本来定
        "-std=c11",
        "-Wall"
    ],
    "clang.cxxflags": [ // 控制c++静态检测时的参数
        "--target=x86_64-apple-darwin18.5.0", // 根据自己的语言版本来定
        "-std=c++17",
        "-Wall"
    ],
    "clang.completion.enable": true, // 效果效果比cpptools要好
    "editor.fontFamily": "JetBrains Mono, Cascadia Code, Menlo, Monaco, 'Courier New', monospace",
    "editor.suggestSelection": "first",
    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
    "sync.gist": "1312b74ca58cb4649944a68f9ba237c7",
    "vim.enableNeovim": true,
    "vim.neovimPath": "/usr/local/bin/nvim",
    "window.zoomLevel": 2,
    "editor.minimap.enabled": false,
    "breadcrumbs.enabled": true,
    "editor.renderControlCharacters": true,
    "workbench.activityBar.visible": true,
    "vs-kubernetes": {
        "vs-kubernetes.draft-path": "/Users/yanmingzhi/.vs-kubernetes/tools/draft/darwin-amd64/draft",
        "vs-kubernetes.helm-path": "/Users/yanmingzhi/.vs-kubernetes/tools/helm/darwin-amd64/helm",
        "vs-kubernetes.minikube-path": "/Users/yanmingzhi/.vs-kubernetes/tools/minikube/darwin-amd64/minikube"
    },
    "go.useLanguageServer": true,
    "editor.fontSize": 14,
    "terminal.integrated.fontSize": 14,
    "workbench.editor.showTabs": false,
    "java.jdt.ls.vmargs": "-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication -javaagent:\"/Users/yanmingzhi/.vscode/extensions/gabrielbb.vscode-lombok-0.9.9/server/lombok.jar\"",
    "java.home": "/Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home",
    "files.exclude": {
        "**/.classpath": true,
        "**/.project": true,
        "**/.settings": true,
        "**/.factorypath": true
    },
    "rust-client.autoStartRls": false,
    "tabnine.experimentalAutoImports": true,
    "rust.rustfmt_path": "/Users/yanmingzhi/.cargo/bin/rustfmt",
    "go.toolsManagement.autoUpdate": true,
    "git.confirmSync": false,
    "git.ignoredRepositories": [
        "~/github/tearust/.cargo"
    ],
    "workbench.iconTheme": "Monokai Pro Icons",
    "editor.cursorStyle": "line",
    "editor.insertSpaces": false,
    "editor.lineNumbers": "on",
    "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
    "editor.wordWrap": "off",
    "gitlens.currentLine.enabled": false,
    "gitlens.hovers.currentLine.over": "line",
    "editor.tabSize": 2,
    "rust-analyzer.rustfmt.enableRangeFormatting": true,
    "editor.formatOnPaste": true,
    "editor.formatOnSave": true,
}