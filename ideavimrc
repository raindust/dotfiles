
let mapleader=','

"
" TaskList.vim
"
map <leader>td <Plug>TaskList

"
" vim-trailing-whitespace
"
" remove space at the end of line
map <leader><space> :FixWhitespace<cr>
nmap <Leader>f :action ReformatCode<CR>
nmap <Leader>s :action SelectInProjectView<CR>
nmap <Leader>a :action Annotate<CR>
nmap <Leader>l :action CommentByLineComment<CR>
nmap <Leader>d :action Compare.LastVersion<CR>
nmap <Leader>o :action CloseAllEditorsButActive<CR>
nmap <Leader>t :action ActivateTerminalToolWindow<CR>
nmap <Leader>h :action HideSideWindows<CR>
nmap <Leader>n :action NewElement<CR>
nmap <Leader>cd :action Debug<CR>
nmap <Leader>z :action Run<CR>
nmap <Leader>z :action Resume<CR>
nmap <Leader>x :action Debug<CR>
nmap <Leader>c :action RunClass<CR>
nmap <Leader>v :action Stop<CR>
nmap <Leader>b :action ToggleLineBreakpoint<CR>
nmap <Leader>rr :action RenameElement<CR>
nmap <Leader>rm :action ExtractMethod<CR>
nmap <Leader>rs :action ChangeSignature<CR>
nmap <Leader>u :action FindUsages<CR>
nmap <Leader>i :action GotoImplementation<CR>
nmap <Leader>I :action GotoSuperMethod<CR>
nmap <Leader>p :action ImplementMethods<CR>
nmap <Leader>e :action ActivateEventLogToolWindow<CR>
"nmap <Leader>bs :action ShowBookmarks<CR>
"nmap <Leader>z :action CloseActiveTab<CR>
nmap <Leader>m :action ToggleBookmarkWithMnemonic<CR>
"nmap <Leader>g :action Github.Create.Gist<CR>
nmap gd :action GotoDeclaration<CR>
nmap gi :action GotoImplementation<CR>
nmap gs :action GotoSuperMethod<CR>
nmap gy :action GotoTypeDeclaration<CR>
nmap gr :action FindUsages<CR>
nmap gu :action FindUsages<CR>
nmap gl :action Forward<CR>
nmap gh :action Back<CR>
nmap gc :action GotoClass<CR>

vmap <Leader>h :action Replace<CR>
vmap <Leader>f :action Find<CR>

set surround

" don't create .*.swp file 2011-11-04
"setlocal noswapfile

" auto (缩进)
set autoindent

" show line number
set number

" support chinese 2011-11-04
set encoding=utf-8
set fileencodings=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set ambiwidth=double
set guifont=Courier\ 10\ Pitch\ 12

" gap between line
"set linespace=2

"set runtimepath+=~/vimfiles

" don't auto change line
"set nowrap
" auto change line
set wrap

" show the uncomplete command. 2011-11-04
set showcmd

" set the cursor line color. 2011-11-04
"if has("gui_running")
"	set cursorline
"	hi cursorline guibg=#033333
"endif

" search option. 2011-11-04
set ignorecase smartcase	"ignore upper or lower char
set incsearch				"high light char when search
set hlsearch				"set high light after search
"clear high light word. 2011-11-04
map <esc><esc><esc> :noh<cr>
" support mous
set mouse=n

" not compatible with vi. 2011-11-04
set nocompatible

set modelines=5

" set num=4 line to curors - when move vertical...
"set so=8

" text, tab and indent related.
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab

set ai	"auto indent
set si	"smart indent

" set how many lines of history vim has to remember
set history=1000
" colorscheme ps_color

" auto backup the open file
set nowritebackup
" auto save
set autowrite

"set backspace=indent,eol,start
"set foldmethod=indent
"set foldlevel=9999
"set list
"set listchars=tab:>-,trail:.,extends:>
"set suffixes+=.pyc,.pyo

" show the match char(eg: {},()...)
set showmatch

" support c/c++ indent
"set cin
"set cino=:0,g0,u0,(0,W4

set fileformat=unix
" always show current position
set ruler
"set visualbell
"set iskeyword-=.

" the commandbar height
set cmdheight=1

" always show the status line
"set laststatus=2

" enable magic
set magic

"set t_Co=256
"colorscheme guardian
"colorscheme molokai
"colorscheme wombat256mod

" cscope setting
if has ("cscope")
	set csprg=/usr/bin/cscope
	set csto=1
	set cst
	set nocsverb
	if filereadable ("cscope.out")
		cs add cscope.out
	endif
	set csverb
endif

" auto save
"set autowrite
set fo-=at
" 折叠
"set fdm=syntax
syntax on
imap jj <esc>
"map <space> :bn<CR>
"map <tab> :bp<CR>
"map <c-j> :tj <c-r>=expand("<cword>")<cr><cr>
"nmap <c-j> :tj <c-r>=expand("<cword>")<cr><cr>
"nmap <c-j>v :vsp \| tj <c-r>=expand("<cword>")<cr><cr>
"nmap <c-j>h :sp \| tj <c-r>=expand("<cword>")<cr><cr>
"
"nmap <c-[>c :cs find c <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>d :cs find d <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>e :cs find e <c-r>=expand("<cword>")<cr>
"nmap <c-[>f :cs find f <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>g :cs find g <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>i :cs find i <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>s :cs find s <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>t :cs find t <c-r>=expand("<cword>")<cr><cr>
"
"nmap <c-[>hc :sp \| cs find c <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>hd :sp \| cs find d <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>he :sp \| cs find e <c-r>=expand("<cword>")<cr>
"nmap <c-[>hf :sp \| cs find f <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>hg :sp \| cs find g <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>hi :sp \| cs find i <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>hs :sp \| cs find s <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>ht :sp \| cs find t <c-r>=expand("<cword>")<cr><cr>
"
"nmap <c-[>vc :vsp \| cs find c <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>vd :vsp \| cs find d <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>ve :vsp \| cs find e <c-r>=expand("<cword>")<cr>
"nmap <c-[>vf :vsp \| cs find f <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>vg :vsp \| cs find g <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>vi :vsp \| cs find i <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>vs :vsp \| cs find s <c-r>=expand("<cword>")<cr><cr>
"nmap <c-[>vt :vsp \| cs find t <c-r>=expand("<cword>")<cr><cr>



function! Find(...)
	let path="."
	if a:0==2
		let path=a:2
	endif
	let l:list=system("find ".path. " -name '".a:1."' | grep -v .svn ")
	let l:num=strlen(substitute(l:list, "[^\n]", "", "g"))
	if l:num < 1
		echo "'".a:1."' not found"
		return
	endif
	if l:num != 1
		let tmpfile = tempname()
		exe "redir! > " . tmpfile
		silent echon l:list
		redir END
		let old_efm = &efm
		set efm=%f

		if exists(":cgetfile")
			execute "silent! cgetfile " . tmpfile
		else
			execute "silent! cfile " . tmpfile
		endif

		let &efm = old_efm

		" Open the quickfix window below the current window
		botright copen
		call delete(tmpfile)
	endif
endfunction
command!  -nargs=* Find :call Find(<f-args>)



"autopen NERDTree and focus cursor in new document
"autocmd vimEnter * NERDTree
"autocmd vimEnter * wincmd p

" NERD Tree
let NERDTreeWinSize=20
let NERDTreeWinPos='right'
"显示隐藏文件
let NERDTreeShowHidden=1

" taglist
let Tlist_WinWidth=20

" add file comment.(添加注释)
map <leader>li :call AddLicense()<CR>
function! AddLicense()
	call append(line(".") + 0,"// Copyright (c) 2012-2018 The Elastos Open Source Project")
	call append(line(".") + 1,"// Distributed under the MIT software license, see the accompanying")
	call append(line(".") + 2,"// file COPYING or http://www.opensource.org/licenses/mit-license.php.")
endfunction

" add main function.(添加main框架)
map <leader>main :call Addmain()<CR>
function Addmain()
	call append(line(".") + 0,"#include <stdio.h>")
	call append(line(".") + 1,"")
	call append(line(".") + 2,"int main(int argc, char * argv[])")
	call append(line(".") + 3,"{")
	call append(line(".") + 4,"")
	call append(line(".") + 5,"\treturn 0;")
	call append(line(".") + 6,"}")
	call append(line(".") + 7,"")
endfunction

